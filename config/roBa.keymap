#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "tap-unless-interrupted";
    tapping-term-ms = <170>;
    quick-tap-ms = <0>;
};

&lt {
    flavor = "tap-unless-interrupted";
    tapping-term-ms = <170>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        mkp_exit_AML: mkp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&sl 4>;

            label = "MKP_EXIT_AML";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
            // (未使用のカスタム hold_tap は削除)
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W           &kp E         &kp R                          &kp T                                                           &kp Y        &kp U  &kp I      &kp O    &kp P
&mt LCTRL A       &mt LEFT_ALT S  &kp D         &kp F                          &kp G        &kp ESCAPE                          &kp LG(Z)      &kp H        &kp J  &kp K      &kp L    &lt 5 MINUS
&mt LEFT_SHIFT Z  &kp X           &kp C         &kp V                          &kp B        &kp TAB                             &kp SPACE      &kp N        &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp LEFT_COMMAND  &kp LCTRL       &kp LEFT_ALT  &lt 2 LEFT_COMMAND             &lt 3 SPACE  &lt 1 RIGHT_COMMAND                 &kp BACKSPACE  &lt 1 ENTER                             &mo 6
            >;
        };

        NUM_FUNC {
            bindings = <
&kp NUMBER_1    &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                               &kp NUMBER_6     &kp N7           &kp N8           &kp N9           &kp N0
&kp F7          &kp F8        &kp F9        &kp F10       &kp F11  &kp F12      &kp EQUAL      &kp PLUS         &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp MINUS
&kp LEFT_SHIFT  &kp F2        &kp F3        &kp F4        &kp F5   &kp F6       &kp SPACE      &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp SLASH
&trans          &trans        &trans        &trans        &trans   &trans       &kp BACKSPACE  &kp ENTER                                                           &kp ASTERISK
            >;
        };

        SYMBOL {
            bindings = <
&kp EXCL        &kp AT_SIGN  &kp HASH   &kp DOLLAR         &kp PERCENT                      &trans  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp NON_US_BACKSLASH
&kp SEMICOLON   &kp COLON    &kp SQT    &kp DOUBLE_QUOTES  &kp GRAVE    &trans      &trans  &trans  &kp SQT       &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SEMICOLON
&kp LEFT_SHIFT  &trans       &kp CARET  &kp AMPERSAND      &kp TILDE    &trans      &trans  &trans  &kp HASH      &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PIPE
&trans          &trans       &trans     &trans             &trans       &trans      &trans  &trans                                                             &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE  &kp LC(LS(TAB))         &kp LC(UP_ARROW)    &kp LC(TAB)              &trans                                         &kp PAGE_UP        &kp BACKSPACE  &kp UP_ARROW  &kp DELETE  &kp PAGE_DOWN
&trans      &kp LG(LA(LEFT_ARROW))  &kp LC(DOWN_ARROW)  &kp LG(LA(RIGHT_ARROW))  &trans       &kp LS(LC(NUMBER_4))      &trans  &kp LC(A)          &kp LEFT       &kp DOWN      &kp RIGHT   &kp LC(E)
&trans      &trans                  &trans              &trans                   &kp LS(TAB)  &kp TAB                   &trans  &trans             &trans         &trans        &trans      &trans
&trans      &trans                  &trans              &trans                   &trans       &trans                    &trans  &kp RIGHT_COMMAND                                           &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&to_layer_0 Q  &to_layer_0 W      &to_layer_0 E      &to_layer_0 R      &to_layer_0 T                                  &to_layer_0 Y    &kp LA(UP_ARROW)   &to_layer_0 LG(UP_ARROW)  &kp LA(DOWN)        &mo 5
&to_layer_0 A  &mkp_exit_AML MB3  &mkp_exit_AML MB2  &mkp_exit_AML MB1  &to_layer_0 G  &to_layer_0 ESCAPE      &trans  &kp LS(LC(TAB))  &mkp_exit_AML MB1  &mkp_exit_AML MB2         &mkp_exit_AML MB3   &kp LC(TAB)
&to_layer_0 Z  &to_layer_0 X      &to_layer_0 X      &to_layer_0 V      &to_layer_0 B  &trans                  &trans  &to_layer_0 N    &to_layer_0 M      &to_layer_0 LG(DOWN)      &to_layer_0 PERIOD  &mo 5
&trans         &trans             &trans             &trans             &to 5          &trans                  &trans  &trans                                                                            &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR_ALL
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &trans
            >;
        };
    };
};
